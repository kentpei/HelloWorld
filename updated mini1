#!/usr/bin/env python
# encoding: utf-8


import tweepy #https://github.com/tweepy/tweepy
import json
import json
import demjson
import re


#Twitter API credentials
consumer_key = ''
consumer_secret = ''
access_key = ''
access_secret = '' 


def get_all_tweets():
    
    #Twitter only allows access to a users most recent 3240 tweets with this method
    
    #authorize twitter, initialize tweepy
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    api = tweepy.API(auth)
    
    #initialize a list to hold all the tweepy Tweets
    alltweets = []    
    
    #make initial request for most recent tweets (200 is the maximum allowed count)
    new_tweets = api.user_timeline(screen_name = "ussconstitution",count=10)
    for tweet in new_tweets:
        alltweets = alltweets + [tweet.text]
    return alltweets
tweet1=get_all_tweets()
print(tweet1)

    #save most recent tweets
    #alltweets.extend(new_tweets)
from google.cloud import language
from google.cloud.language import enums
from google.cloud.language import types
#import testjson
# Instantiates a client
sentiment_score = []
def get_score(text1):
    for tweet in text1:
        client = language.LanguageServiceClient()  
        # The text to analyze
        document = types.Document(content=tweet,type=enums.Document.Type.PLAIN_TEXT)

        # Detects the sentiment of the text
        sentiment_score.append(client.analyze_sentiment(document=document).document_sentiment.score)

        #print('Text: {}'.format(tweet))   #debug
        #print('Sentiment: {}, {}'.format(sentiment.score, sentiment.magnitude))  #debug

    #average_sentiment = mean(sentiment_score_list)

    average_sentiment = sum(sentiment_score)/len(sentiment_score)
    return [average_sentiment,sentiment_score]
print(get_score(tweet1)[0])
def is_satisfied():
  x,y= 0,0
  for score in get_score(tweet1)[1]:
    if score > 0:
        x = x + 1
    elif score < 0:
        y = y + 1
  if x > y:
    print("More of the posts about the attraction are positive")
  elif x < y:
    print("More of the posts about the attraction are negative")
  else:
    print("The posts are equally split between positve and negative")
  return "done"
print(is_satisfied())
